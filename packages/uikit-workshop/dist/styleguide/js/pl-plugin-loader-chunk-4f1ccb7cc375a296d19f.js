(window.webpackJsonp=window.webpackJsonp||[]).push([["pl-plugin-loader"],{"./src/scripts/components/plugin-loader.js":function(module,__webpack_exports__,__webpack_require__){"use strict";eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"pluginLoader\", function() { return pluginLoader; });\n/**\r\n * Plugin Loader - takes the assets they can be loaded for plugins and adds them to the DOM\r\n */\n// @todo: this entire approach needs to get MAJORLY refactored.\n// At an absolute bare minimum we should be using off the shelf loadJS and loadCSS loaders for handling the async loading howe\nvar scriptjs = __webpack_require__(/*! scriptjs */ \"./node_modules/scriptjs/dist/script.js\");\n\nvar pluginLoader = {\n  init: function init() {\n    for (var i = 0; i < window.plugins.length; ++i) {\n      var plugin = window.plugins[i]; // load the templates\n\n      for (var key in plugin.templates) {\n        if (plugin.templates.hasOwnProperty(key)) {\n          var t = document.getElementsByTagName('script');\n          var l = t.length - 1;\n          var s = t[l];\n          var n = document.createElement('script');\n          n.type = 'text/mustache';\n          n.id = plugin.name.replace('/', '-') + '-' + key + '-template';\n          n.innerHTML = plugin.templates[key];\n          s.parentNode.insertBefore(n, s.nextSibling);\n        }\n      } // load the stylesheets\n\n\n      for (var k = 0; k < plugin.stylesheets.length; ++k) {\n        var _s = plugin.stylesheets[k];\n\n        var _t = document.getElementsByTagName('link');\n\n        var _l = _t.length - 1;\n\n        var c = _t[_l];\n\n        var _n = document.createElement('link');\n\n        _n.type = 'text/css';\n        _n.rel = 'stylesheet';\n        _n.href = 'patternlab-components/' + plugin.name + '/' + _s;\n        _n.media = 'screen';\n        c.parentNode.insertBefore(_n, c.nextSibling);\n      } // load the javascript\n      // $script.path('patternlab-components/'+plugin.name+'/');\n      // @todo: remove evals when we refactor this entire approach\n\n\n      scriptjs(plugin.javascripts, plugin.name, eval('(function() { ' + plugin.callback + ' })') // eslint-disable-line\n      );\n      scriptjs.ready([plugin.name], eval('(function() { ' + plugin.onready + ' })') // eslint-disable-line\n      );\n    }\n  }\n};\npluginLoader.init();\n\n//# sourceURL=webpack:///./src/scripts/components/plugin-loader.js?")}}]);